#!/usr/bin/env perl

use strict;
use warnings;
use POSIX qw(strftime);
use List::Util qw(sum product min max uniq);

no warnings 'experimental::smartmatch';

my $log = "";
my %args = @ARGV;

if (exists $args{'--help'}) {
	print("
Filters logs from stdin, for example:

  tail -f mylog.log | log-filter --block spam,warning,fish

You might need to do a trick to fake tty to have colors, like this:

  0<&- script -qefc \"ls --color=auto\" /dev/null | log-filter

Usage: log-filter [args]
  --block      comma separated list of words, any output in less then 1s containing this word will be filtered out
  --window     window time in seconds to group logs, by default it's 1s
  --retention  days to save logs history, default is 14
  --days-ago   how many days does it take for you to consider those logs are 'old'? Default is 3. Days where logs were not collected are not counted
  --help       shows this help

"
	);
	exit();
}

my $window = $args{'--window'} || 1;
my $retention = $args{'--retention'} || 14;
my $days_ago = $args{'--days-ago'} || 3;
my $history = parse_history();

my $hyperparameters = {
	num_relevant_words => 10,
	new_word_prob => 0.1,
	threshold => 0.5,
	upper_bound => 0.99,
	lower_bound => 0.01,
};


sub main {
	local $SIG{ALRM} = sub {
		process_log();
		$log = "";
		main();
	};
	while (my $line = <STDIN>) {
		$log .= $line;
		alarm($window);
	}
	process_log();
}


sub process_log {
	my @lines = split_lines($log);
	my @filtered_words = split ",", ($args{'--block'} || '');

	my $today = strftime "%Y-%m-%d", localtime;

	my $filename = $ENV{"HOME"} . '/.log-filter-history';
	open(my $fh, '>>', $filename) or die "Could not open file '$filename' $!";

	@lines = grep {
		my @words = split_words($_);
		my $included = 0;
		if (@words) {
			my @matching_words = grep { $_ ~~ @words } @filtered_words;
			$history->{$today}{$_}++ for @words;
			$included = (not scalar @matching_words) && bayesian_filter(\@words);

			print $fh "$today:", join(",", @words), "\n";
		}
		$included;
	} @lines;
	close $fh;

	my $separator = "--------------------------------------------------------------------------------";
	print join $separator, @lines;
}


sub split_lines {
	my $log = shift;

	return split /----+|==>.*?<==/, $log;
}


sub split_words {
	my $log = shift;

	my $word_divisions = '\s|::|\/';
	my $color_marker = '\e\[[\d;]+m';
	my $special_characters = '[^a-z-_\/]';
	return grep { $_ } map { $_ =~ s/$color_marker|$special_characters//gir } split /$word_divisions/, $log;
}


sub parse_history {
	my $history = {};
	if (open(my $fh, '<:encoding(UTF-8)', $ENV{"HOME"} . '/.log-filter-history') && open(my $out, '>', $ENV{"HOME"} . '/.log-filter-history.tmp')) {
		while (my $row = <$fh>) {
			chomp $row;
			my ($date, $wordlist) = split ":", $row;
			my $retetion_date = strftime "%Y-%m-%d", localtime(time() - 24 * 60 * 60 * $retention);
			next if $date lt $retetion_date;
			my @words = split ",", $wordlist;
			$history->{$date}{$_}++ for @words;
			print $out "$row\n";
		}
		`mv ~/.log-filter-history.tmp ~/.log-filter-history`;
	}
	return $history;
}


sub calculate_totals {
	my ($words, $history) = @_;

	my $totals = {};
	for my $date (keys %$history) {
		$totals->{dates}{$date} = sum values %{$history->{$date}};
		$totals->{words}{$_} += $history->{$date}{$_} || 0 for uniq @$words; # TODO: test this uniq
	}
	$totals->{total} = sum values %{$totals->{dates}};

	return $totals;
}


sub word_posteriors {
	my ($word, $history, $totals) = @_;

	my $posteriors = {};
	for my $date (keys %$history) {
		if ($totals->{words}{$word} < 1 || not exists $history->{$date}{$word} ) {
			$posteriors->{$date} = $hyperparameters->{new_word_prob};
			next;
		}
		my $P_date_given_word = $history->{$date}{$word} / $totals->{dates}{$date};
		my $P_date = $totals->{dates}{$date} / $totals->{total};
		my $P_word = $totals->{words}{$word} / $totals->{total};
		my $prob = ($P_date_given_word * $P_date) / $P_word;

		$posteriors->{$date} = max($hyperparameters->{lower_bound}, min($hyperparameters->{upper_bound}, $prob));
	}

	return $posteriors;
}


sub posteriors {
	my ($words, $history) = @_;

	my $totals = calculate_totals($words, $history);

	my $posteriors = {};
	for my $word (@$words) {
		my $word_posterior = word_posteriors($word, $history, $totals);
		$posteriors->{$_}{$word} = $word_posterior->{$_} for keys %{$word_posterior};
	}

	return $posteriors;
}

# References:
# This is implementented according to the formula on http://www.paulgraham.com/spam.html
# Although it might not be the most correct Bayes way, we accept his assumptions,
# the difference is explained on https://cs.wellesley.edu/~anderson/writing/naive-bayes.pdf
sub combined_probability {
	my ($posteriors, $n) = @_;

	my $combined_probabilities = {};
	for my $date (keys %{$posteriors}) {
		my $posteriors_for_date = $posteriors->{$date};

		my @relevant_probs = sort {abs($b - 0.5) <=> abs($a - 0.5)} values %{$posteriors_for_date};
		@relevant_probs = @relevant_probs[0..min($n - 1, scalar @relevant_probs - 1)];

		my $combined_probability = (product @relevant_probs) / ((product @relevant_probs) + (product map { 1 - $_ } @relevant_probs));
		$combined_probabilities->{$date} = $combined_probability;
	}
	return $combined_probabilities;
}


sub bayesian_filter {
	my ($words) = @_;

	my $posteriors = posteriors($words, $history);
	my $combined_probabilities = combined_probability($posteriors, $hyperparameters->{num_relevant_words});

	my @dates = reverse sort keys %$history;
	for my $date (@dates[0..$days_ago - 1]) {
		return 1 if $combined_probabilities->{$date} >= $hyperparameters->{threshold};
	}

	print ".";
	return 0;
}

main() unless caller;
